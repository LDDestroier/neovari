--[[
 NeoVariable API
--]]

local id = os.getComputerID()
local clientName = "neovari-client-"..math.random(0,9999999)
local specifiedModem = {}
port = 262
local modem = {}
local defaultTimeOut = 1 --seconds

local waitForModem = function(time)
	local tID, evt, rID = os.startTimer(time or 1)
	while true do
		evt, rID = os.pullEvent()
		if evt == "timer" then
			if rID == tID then
				return false
			end
		elseif evt == "peripheral" then
			if peripheral.getType(rID) == "modem" then
				return true
			end
		end
	end
end

specifyModem = function(mod)
	if mod == nil then
		specifiedModem = {}
		return true
	elseif type(mod) == "string" then
		if peripheral.wrap(mod) then
			specifiedModem = peripheral.wrap(mod)
			specifiedModem.open(port)
			return specifiedModem
		else
			return false
		end
	elseif type(mod) == "table" then
		specifiedModem = mod
		specifiedModem.open(port)
		return specifiedModem
	else
		return false
	end
end

getSpecifiedModem = function()
	return specifiedModem
end

local getModem = function(timeout) --returns a working modem, prioritizes use of wireless modem
	if specifiedModem.isWireless then
		if specifiedModem.isWireless() ~= nil then
			return specifiedModem
		end
	end
	local modems = {peripheral.find("modem")}
	if #modems == 0 then
		if waitForModem(timeout or defaultTimeOut) then
			modems = {peripheral.find("modem")}
		else
			error("No modem found...")
		end
	end
	for a = 1, #modems do
		if modems[a].isWireless() then
			modems[a].open(port)
			modems[a].open(id)
			return modems[a]
		end
	end
	modems[1].open(port)
	modems[1].open(id)
	return modems[1]
end

modem = getModem()

findServer = function(timeout, sID) --returns server name, server ID
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		clientName = clientName,
		response = "lookup",
	})
	local tID, evt = os.startTimer(timeout or defaultTimeOut)
	while true do
		evt = {os.pullEvent()}
		if evt[1] == "timer" and evt[2] == tID then
			return false
		elseif evt[1] == "modem_message" then
			local side, freq, repfreq, msg, distance = evt[2], evt[3], evt[4], evt[5], evt[6]
			if (freq == id) and (type(msg) == "table") then
				if (type(msg.id) == "number") and (msg.response == "lookup_response") and (type(msg.serverName) == "string") and (msg.clientName == clientName) then
					if (not sID) or (sID == msg.id) then
						return msg.serverName, msg.id
					end
				end
			end
		end
	end
end

findServerList = function(timeout) --returns table with servers
	timeout = timeout or defaultTimeOut
	assert(tonumber(timeout), "bad argument, especially 'timeout'")
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		clientName = clientName,
		response = "lookup",
	})
	local tID, evt = os.startTimer(timeout or defaultTimeOut)
	local output = {}
	while true do
		evt = {os.pullEvent()}
		if evt[1] == "timer" and evt[2] == tID then
			return output
		elseif evt[1] == "modem_message" then
			local side, freq, repfreq, msg, distance = evt[2], evt[3], evt[4], evt[5], evt[6]
			if (freq == id) and (type(msg) == "table") then
				if (type(msg.id) == "number") and (msg.response == "lookup_response") and (type(msg.serverName) == "string") and (msg.clientName == clientName) then
					if (not sID) or (sID == msg.id) then
						output[#output+1] = {serverName = msg.serverName, id = msg.id}
					end
				end
			end
		end
	end
end

getVariable = function(server, gameName, user, variableName, timeout) --returns success, value
	if type(variableName) == "number" then variableName = tostring(variableName) end
	assert(type(server) == "string",	"bad argument, specifically 'server'")
	assert(type(gameName) == "string",	"bad argument, specifically 'gameName'")
	assert(type(user) == "string",		"bad argument, specifically 'user'")
	assert(type(variableName) == "string",	"bad argument, specifically 'variableName'")
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		user = user,
		response = "getVariable",
		varname = variableName
	})
	local tID = os.startTimer(timeout or defaultTimeOut)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientName == clientName) and (msg.serverName == server) and (msg.gameName == gameName) and (msg.response == "getVariable_response") and (msg.varname == variableName) and (msg.user == user) and (type(msg.success) == "boolean") then
					return msg.success, msg.varval
				end
			end
		end
	end
end

setVariable = function(server, gameName, user, variableName, variableValue, timeout) --returns success
	if type(variableName) == "number" then variableName = tostring(variableName) end
	assert(type(server) == "string",	"bad argument, specifically 'server'")
	assert(type(gameName) == "string",	"bad argument, specifically 'gameName'")
	assert(type(user) == "string",		"bad argument, specifically 'user'")
	assert(type(variableName) == "string",	"bad argument, specifically 'variableName'")
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		user = user,
		response = "setVariable",
		varname = variableName,
		varval = variableValue
	})
	local tID = os.startTimer(timeout or defaultTimeOut)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientID == id) and (msg.clientName == clientName) and (msg.serverName == server) and (msg.gameName == gameName) and (msg.response == "setVariable_response") and (msg.varname == variableName) and (msg.user == user) and (type(msg.success) == "boolean") then
					return msg.success
				end
			end
		end
	end
end

getEnvironment = function(server, gameName, user) --returns success, environment
	assert(type(server) == "string",	"bad argument, specifically 'server'")
	assert(type(gameName) == "string",	"bad argument, specifically 'gameName'")
	assert(type(user) == "string",		"bad argument, specifically 'user'")
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		user = user,
		response = "getEnvironment",
	})
	local tID = os.startTimer(timeout or defaultTimeOut)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientID == id) and (msg.clientName == clientName) and (msg.serverName == server) and (msg.gameName == gameName) and (msg.response == "getEnvironment_response") and (msg.user == user) and (type(msg.success) == "boolean") and (type(msg.environment) == "table") then
					return msg.success, msg.environment
				end
			end
		end
	end
end

setEnvironment = function(server, gameName, user, environment, timeout) --returns success
	assert(type(server) == "string",	"bad argument, specifically 'server'")
	assert(type(gameName) == "string",	"bad argument, specifically 'gameName'")
	assert(type(user) == "string",		"bad argument, specifically 'user'")
	assert(type(environment) == "table",	"bad argument, specifically 'environment'")
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		user = user,
		response = "setEnvironment",
		environment = environment
	})
	local tID = os.startTimer(timeout or defaultTimeOut)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientID == id) and (msg.clientName == clientName) and (msg.serverName == server) and (msg.gameName == gameName) and (msg.response == "setEnvironment_response") and (msg.user == user) and (type(msg.success) == "boolean") then
					return msg.success
				end
			end
		end
	end
end

queueEvent = function(server, gameName, eventTbl, timeout) --returns success
	assert(type(server) == "string",	"bad argument, specifically 'server'")
	assert(type(gameName) == "string",	"bad argument, specifically 'gameName'")
	assert(type(eventTbl) == "table",	"bad argument, specifically 'eventTbl'")
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		clientID = id,
		eventTbl = eventTbl,
		response = "queueEvent"
	})
end

pullEvent = function(server, gameName, eventName, timeout)
	assert(type(server) == "string",	"bad argument, specifically 'server'")
	assert(type(gameName) == "string",	"bad argument, specifically 'gameName'")
	local tID
	if tonumber(timeout) then
		tID = os.startTimer(timeout)
	end
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (type(msg) == "table") then
				if (msg.serverName == server) and (msg.gameName == gameName) and (msg.response == "queueEvent_response") and (type(msg.eventTbl) == "table") and (type(msg.success) == "boolean") then
					if (not eventName) or (msg.eventTbl[1] == eventName) then
						return msg.success, msg.eventTbl
					end
				end
			end
		end
	end
end

getUsers = function(server, gameName, timeout) --returns success, users
	assert(type(server) == "string",	"bad argument, specifically 'server'")
	assert(type(gameName) == "string",	"bad argument, specifically 'gameName'")
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		response = "getUsers",
	})
	local tID = os.startTimer(timeout or defaultTimeOut)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientName == clientName) and (msg.serverName == server) and (msg.gameName == gameName) and (msg.response == "getUsers_response") and (type(msg.users) == "table") and (type(msg.success) == "boolean") then
					return msg.success, msg.users
				end
			end
		end
	end
end

clearGame = function(server, gameName, timeout)
	assert(type(server) == "string",	"bad argument, specifically 'server'")
	assert(type(gameName) == "string",	"bad argument, specifically 'gameName'")
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		response = "clearGame",
	})
	local tID = os.startTimer(timeout or defaultTimeOut)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientName == clientName) and (msg.serverName == server) and (msg.gameName == gameName) and (msg.response == "clearGame_response") and (type(msg.success) == "boolean") then
					return msg.success
				end
			end
		end
	end
end

clearVariable = function(server, gameName, user, variableName, timeout)
	return setVariable(server, gameName, user, variableName, nil, timeout)
end

clearUser = function(server, gameName, user, timeout)
	return setEnvironment(server, gameName, user, {}, timeout)
end
