--[[
 NeoVariable API

 Make sure a NeoVariable server is set up within modem range.
  Functions So Far:
  
   serverName, serverID = neovari.findServer( number timeout, number ID )
  Finds a server, and returns its name.
  Searches for 'timeout' seconds.
  If optional argument 'ID' is defined, it will only accept the server with that ID.
  
   success = neovari.setVariable( string serverName, string gameName, string userName, string variableName, any variableValue )
  Each variable on a NeoVariable server is stored in the following structure:
  allVariables = {
  	  gameName = {
		  userName = {
			  variableName = variableValue,
		  }, ...
	  }, ...
  }
  This function sets the variable 'variableName' inside of 'userName' inside of 'gameName' as 'variableName'.
  
   success, variable = neovari.getVariable( string serverName, string gameName, string userName, string variableName )
  This takes the same arguments as neovari.setVariable, except for variableValue.
  Returns the value of 'variableName' inside of 'userName' inside of 'gameName'.
   
  
   success = neovari.setEnvironment( string serverName, string gameName, string userName, table everyVariable )
  Sets every variable in 'serverName' in 'gameName' in 'userName' to all the numerical values in 'everyVariable'.
  The table 'everyVariable' would be in this string-indexed table format:
  {
  	var1 = "hello ",
	var2 = "world!"
  }
  
   success, environment = getEnvironment( string serverName, string gameName, string userName )
  Returns every variable in 'serverName' in 'gameName' in 'userName' in a string-indexed table, like the one above.
--]]

local port = 262
local id = os.getComputerID()
local clientName = "neovari-client-"..math.random(1,999999)
local modem = {}

local waitForModem = function(time)
	local tID, evt, rID = os.startTimer(time or 1)
	while true do
		evt, rID = os.pullEvent()
		if evt == "timer" then
			if rID == tID then
				return false
			end
		elseif evt == "peripheral" then
			if peripheral.getType(rID) == "modem" then
				return true
			end
		end
	end
end

local getModem = function(timeout) --returns a working modem, prioritizes use of wireless modem
	if modem.open then return modem end
	local modems = {peripheral.find("modem")}
	if #modems == 0 then
		if waitForModem(timeout or 3) then
			modems = {peripheral.find("modem")}
		else
			error("No modem found...")
		end
	end
	for a = 1, #modems do
		if modems[a].isWireless() then
			modems[a].open(port)
			modems[a].open(id)
			return modems[a]
		end
	end
	modems[1].open(port)
	modems[1].open(id)
	return modems[1]
end

modem = getModem()

findServer = function(timeout, sID) --returns server name, server ID
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		clientName = clientName,
		response = "lookup",
	})
	local tID, evt = os.startTimer(timeout or 3)
	while true do
		evt = {os.pullEvent()}
		if evt[1] == "timer" and evt[2] == tID then
			return false
		elseif evt[1] == "modem_message" then
			local side, freq, repfreq, msg, distance = evt[2], evt[3], evt[4], evt[5], evt[6]
			if (freq == id) and (type(msg) == "table") then
				if (type(msg.id) == "number") and (msg.response == "lookup_response") and (type(msg.serverName) == "string") and (msg.clientName == clientName) then
					if (not sID) or (sID == msg.id) then
						return msg.serverName, msg.id
					end
				end
			end
		end
	end
end

getVariable = function(server, gameName, user, variableName, timeout) --returns success, value
	if type(variableName) == "number" then variableName = tostring(variableName) end
	if not (type(server) == "string") then error("bad argument, specifically 'server'") end
	if not (type(gameName) == "string") then error("bad argument, specifically 'gameName'") end
	if not (type(user) == "string") then error("bad argument, specifically 'user'") end
	if not (type(variableName) == "string") then error("bad argument, specifically 'variableName'") end
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		user = user,
		response = "getVariable",
		varname = variableName
	})
	local tID = os.startTimer(timeout or 3)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientName == clientName) and (msg.serverName == server) and (msg.response == "getVariable_response") and (msg.varname == variableName) and (msg.user == user) and (type(msg.success) == "boolean") then
					return msg.success, msg.varval
				end
			end
		end
	end
end

setVariable = function(server, gameName, user, variableName, variableValue, timeout) --returns success
	if type(variableName) == "number" then variableName = tostring(variableName) end
	if not (type(server) == "string") then error("bad argument, specifically 'server'") end
	if not (type(gameName) == "string") then error("bad argument, specifically 'gameName'") end
	if not (type(user) == "string") then error("bad argument, specifically 'user'") end
	if not (type(variableName) == "string") then error("bad argument, specifically 'variableName'") end
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		user = user,
		response = "setVariable",
		varname = variableName,
		varval = variableValue
	})
	local tID = os.startTimer(timeout or 3)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientID == id) and (msg.clientName == clientName) and (msg.serverName == server) and (msg.response == "setVariable_response") and (msg.varname == variableName) and (msg.user == user) and (type(msg.success) == "boolean") then
					return msg.success
				end
			end
		end
	end
end

getEnvironment = function(server, gameName, user) --returns success, environment
	if not (type(server) == "string") then error("bad argument, specifically 'server'") end
	if not (type(gameName) == "string") then error("bad argument, specifically 'gameName'") end
	if not (type(user) == "string") then error("bad argument, specifically 'user'") end
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		user = user,
		response = "getEnvironment",
	})
	local tID = os.startTimer(timeout or 3)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientID == id) and (msg.clientName == clientName) and (msg.serverName == server) and (msg.response == "getEnvironment_response") and (msg.user == user) and (type(msg.success) == "boolean") and (type(msg.environment) == "table") then
					return msg.success, msg.environment
				end
			end
		end
	end
end

setEnvironment = function(server, gameName, user, environment, timeout) --returns success
	if not (type(server) == "string") then error("bad argument, specifically 'server'") end
	if not (type(gameName) == "string") then error("bad argument, specifically 'gameName'") end
	if not (type(user) == "string") then error("bad argument, specifically 'user'") end
	if not (type(environment) == "table") then error("bad argument, specifically 'environment'") end
	modem = getModem()
	modem.transmit(port,id,{
		id = id,
		gameName = gameName,
		serverName = server,
		clientName = clientName,
		user = user,
		response = "setEnvironment",
		environment = environment
	})
	local tID = os.startTimer(timeout or 3)
	local evt, rID, freq, repfreq, msg, distance
	while true do
		evt, rID, freq, repfreq, msg, distance = os.pullEvent()
		if evt == "timer" and rID == tID then
			return false
		elseif evt == "modem_message" then
			if (freq == id) and (type(msg) == "table") then
				if (msg.clientID == id) and (msg.clientName == clientName) and (msg.serverName == server) and (msg.response == "setEnvironment_response") and (msg.user == user) and (type(msg.success) == "boolean") then
					return msg.success
				end
			end
		end
	end
end
